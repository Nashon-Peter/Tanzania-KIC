# -*- coding: utf-8 -*-
"""Assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JEtDe6ZvoG6zgxL6mPkQYpKMD5kW_JwH
"""

import math
x= 3
y = 52
math.factorial(x)







# prompt: x = 10

x = 10

def mycode(): # definition of my function
  name = input("what is your name?")
  print("hello!", name)

def calculator ():
  x = int(input("enter first number:"))
  y = int(input("enter second number:"))
  op = input("enter operator:")
  if op == "+":
    return x+y
  elif op == "-":
    return x-y
  elif op == "*":
    return x*y
  elif op == "/":
    return x/y
  else:
    return "invalid operator"

calculator()

add(14,15)

mycode()

def format_string(name, age): # funcation Definition

    """
    Create a formatted string using f-strings.
    Args:
        name (str): Person's name
        age (int): Person's age
    Returns:
        str: Formatted string
    """
    return f"My name is {name} and I am {age} years old."


print(format_string("Erum", 25))  # Output: My name is Alice and I am 30 years old.

# method 2 we dont need arguments
def format_string(): # funcation Definition
  name = input("Enter name:")
  age = int(input("Enter age:"))
  height = float(input("Enter height:"))
  return f"My name is {name}, I am {age} years old and my height is {height}."


print(format_string())

# method three
from os import name
def format_string(name, age): # funcation Definition
    # comment
    """
    Create a formatted string using f-strings.
    Args:
        name (str): Person's name
        age (int): Person's age
    Returns:
        str: Formatted string
    """
    return f"My name is {name} and I am {age} years old."

name = input("Enter name:")
age = int(input("Enter age:"))
print(format_string(name, age))  # Output: My name is Alice and I am 30 years old.

def conditional_check(number):
    """
    Check if a number is greater, lesser, or equal to 10.
    Args:
        number (int): Number to check
    Returns:
        str: "Greater", "Lesser", or "Equal"
    """

    if number > 10:
        return "Greater"
    elif number < 10:
        return "Lesser"
    else:
        return "Equal"


print(conditional_check(5))  # Output: Greater

def loop_sum():
    """
    Calculate sum of numbers from 1 to n using a loop.
    Args:
        n (int): Upper limit
    Returns:
        int: Sum of numbers
    """
    total = 0
    n=int(input("enter number:"))
    for i in range(1, n + 1):
        total = total+ i

    return total


print(loop_sum())  # Output: 15 (1+2+3+4+5)

list= [6, 5, 9, 10, 15 ]

def age(age):
  return f"your are {age} years ols"
age(25)

def list_operations(numbers):
    """
    Perform operations on a list of numbers.
    Args:
        numbers (list): List of numbers
    Returns:
        tuple: (sum, max, min)
    """
    return (sum(numbers), max(numbers), min(numbers)) # these are list operations that why we dont need to add


print(list_operations([4, 8, 15, 16, 23, 42]))  # Output: (108, 42, 4)

def dict_operations(students_dict):
    """
    Find students with scores above 80.
    Args:
        students_dict (dict): Dictionary of student names and scores
    Returns:
        list: Names of students with scores > 80
    """
    return [name for name, score in students_dict.items() if score > 80]


students = {"John": 75, "Emma": 88, "Sophia": 95, "Liam": 60}
print(dict_operations(students))  # Output: ['Emma', 'Sophia']

def set_operations(list1, list2):
    """
    Find common elements between two lists.
    Args:
        list1 (list): First list
        list2 (list): Second list
    Returns:
        set: Common elements
    """
    return set(list1) & set(list2)

print("\n6. set_operations:")
print(set_operations([1, 2, 3, 4], [3, 4, 5, 6]))  # Output: {3, 4}

def arithmetic_ops(a, b):
    """
    Perform arithmetic operations.
    Args:
        a (float): First number
        b (float): Second number
    Returns:
        dict: Results of arithmetic operations
    """
    return {
        'add': a + b,
        'subtract': a - b,
        'multiply': a * b,
        'divide': a / b if b != 0 else None
    }


print(arithmetic_ops(10, 2))
# Output: {'add': 12, 'subtract': 8, 'multiply': 20, 'divide': 5.0}



def logical_ops(x, y):
    """
    Perform logical operations.
    Args:
        x (bool): First boolean
        y (bool): Second boolean
    Returns:
        dict: Results of logical operations
    """
    return {
        'and': x and y,
        'or': x or y,
        'not_x': not x,
        'not_y': not y
    }

print("\n8. logical_ops:")
print(logical_ops(True, False))
# Output: {'and': False, 'or': True, 'not_x': False, 'not_y': True}

def bitwise_ops(a, b):
    """
    Perform bitwise operations.
    Args:
        a (int): First integer
        b (int): Second integer
    Returns:
        dict: Results of bitwise operations
    """
    return {
        'and': a & b,
        'or': a | b,
        'xor': a ^ b,
        'left_shift_a': a << 1,
        'right_shift_b': b >> 1
    }
    print("\n9. bitwise_ops:")
print(bitwise_ops(5, 3))
# Output: {'and': 1, 'or': 7, 'xor': 6, 'left_shift_a': 10, 'right_shift_b': 1}