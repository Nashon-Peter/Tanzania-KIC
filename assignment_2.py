# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ykV7Somo-5hOR9U2QyCzZLCU0YeqnelP
"""

# function definition/ like defining variable
def name_of_function (arugments):
    #code
    return

# function call
name_of_function()



"""## task1
* Create a function add_numbers that takes two arguments and returns their sum.
"""

#define function
def add_numbers(a, b):
    return a + b

# Example usage
print("Sum:", add_numbers(10, 5))

#define function
def add_numbers(a= 5, b= 6):
    return a + b

# Example usage
print("Sum:", add_numbers())

#define function
def add_numbers(a, b):
    return a + b

# Example usage
print("Sum:", add_numbers())



"""* Write a function calculate_area that calculates the area of a rectangle.
* Use default arguments for width and height (e.g., width=10, height=5).
* Call the function using positional arguments, keyword arguments, and a mix of both.
"""

def calculate_area(width=10, height=5):
    return width * height

# Positional arguments
print("Area (positional):", calculate_area(7, 3))

# Keyword arguments
print("Area (keyword):", calculate_area(height=6, width=4))

# Mix of both
print("Area (mixed):", calculate_area(8, height=2))

"""# Lambda Functions (5 points)

* Create a lambda function to compute the square of a number.
* Demonstrate its usage with the map() function over a list of integers.
"""

# Adding squaring with function
def saquares(numbers):
    squares = []
    for number in numbers:
        squares.append(number ** 2)
    return squares

numbers = [1, 2, 3, 4, 5]
squares = saquares(numbers)
print("Squares:", squares)

# Lambda for squaring
square = lambda x: x ** 2

# Using map with lambda
numbers = [1, 2, 3, 4, 5]
squares = list(map(square, numbers)) # list(map (to map lambda function on values ))
print("Squares:", squares)

grades= ["A", "B", "C"]
for grade in grades:
    print(grade)

def apply_function(func, numbers):
    return [func(number) for number in numbers]

def double(x):
    return x * 2

nums = [2, 4, 6]
print("Doubled:", apply_function(double, nums))

import random
random_nums = [random.randint(1, 100) for _ in range(5)]
print("Random numbers:", random_nums)

import random
import math

random_nums = [random.randint(1, 100) for _ in range(5)]
print("Random numbers:", random_nums)

sqrt_vals = [math.sqrt(num) for num in random_nums]
print("Square roots:", sqrt_vals)

def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

def multiply(a, b):
    return a * b

def divide(a, b):
    if b == 0:
        return "Cannot divide by zero"
    return a / b

print(multiply(7,7))



import os

# Create directory
dir_name = "assignment_files"
if not os.path.exists(dir_name):
    os.mkdir(dir_name)

# File path
file_path = os.path.join(dir_name, "sample.txt")

# Write to file
with open(file_path, "w") as f:
    f.write("Hello from Python! This is a test file.")

# Read from file
with open(file_path, "r") as f:
    content = f.read()

print("File contents:")
print(content)